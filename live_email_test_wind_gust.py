#!/usr/bin/env python3
"""
LIVE EMAIL TEST - WIND AND GUST
===============================
Test WIND and GUST implementation with live email sending.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import date
from src.weather.core.morning_evening_refactor import MorningEveningRefactor
from src.notification.email_client import EmailClient
import yaml

def load_config():
    """Load configuration from config.yaml"""
    with open('config.yaml', 'r', encoding='utf-8') as file:
        return yaml.safe_load(file)

def test_wind_gust_live_email():
    """Test WIND and GUST with live email sending"""
    print("üå¨Ô∏è LIVE EMAIL TEST - WIND AND GUST")
    print("=" * 50)
    print()
    
    try:
        # Load configuration
        config = load_config()
        refactor = MorningEveningRefactor(config)
        
        # Test data
        current_date = date.today()
        stage_name = "Test"
        
        print(f"üìÖ Test Date: {current_date}")
        print(f"üìç Stage: {stage_name}")
        print()
        
        # Generate report
        print("üìä GENERATING REPORT:")
        print("-" * 30)
        
        result_output, debug_output = refactor.generate_report(stage_name, "morning", str(current_date))
        
        print(f"‚úÖ Report generated")
        print(f"   Result Output: {result_output}")
        print(f"   Debug Output Length: {len(debug_output)} characters")
        print()
        
        # Parse result output
        result_parts = result_output.split()
        if len(result_parts) >= 7:
            wind_part = result_parts[5]
            gust_part = result_parts[6]
            
            print(f"üìã RESULT OUTPUT ANALYSIS:")
            print(f"   Wind: {wind_part}")
            print(f"   Gust: {gust_part}")
            print()
        
        # Analyze debug output
        print("üîç DEBUG OUTPUT ANALYSIS:")
        print("-" * 30)
        
        debug_lines = debug_output.split('\n')
        
        # Check for WIND section
        wind_section_found = False
        wind_section_start = -1
        
        for i, line in enumerate(debug_lines):
            if "WIND" in line and "THUNDERSTORM" not in line:
                wind_section_found = True
                wind_section_start = i
                print(f"‚úÖ WIND section found at line {i+1}: {line.strip()}")
                break
        
        if not wind_section_found:
            print(f"‚ùå WIND section not found in debug output")
        
        # Check for GUST section
        gust_section_found = False
        gust_section_start = -1
        
        for i, line in enumerate(debug_lines):
            if "GUST" in line and "THUNDERSTORM" not in line:
                gust_section_found = True
                gust_section_start = i
                print(f"‚úÖ GUST section found at line {i+1}: {line.strip()}")
                break
        
        if not gust_section_found:
            print(f"‚ùå GUST section not found in debug output")
        
        print()
        
        # Show WIND section content
        if wind_section_found:
            print("üå¨Ô∏è WIND SECTION CONTENT:")
            print("-" * 30)
            section_end = len(debug_lines)
            for i in range(wind_section_start + 1, len(debug_lines)):
                if debug_lines[i].strip().startswith('===') or debug_lines[i].strip().startswith('THUNDERSTORM') or debug_lines[i].strip().startswith('GUST'):
                    section_end = i
                    break
            
            for i in range(wind_section_start, section_end):
                print(f"   {i+1:3d}: {debug_lines[i]}")
            print()
        
        # Show GUST section content
        if gust_section_found:
            print("üí® GUST SECTION CONTENT:")
            print("-" * 30)
            section_end = len(debug_lines)
            for i in range(gust_section_start + 1, len(debug_lines)):
                if debug_lines[i].strip().startswith('===') or debug_lines[i].strip().startswith('THUNDERSTORM'):
                    section_end = i
                    break
            
            for i in range(gust_section_start, section_end):
                print(f"   {i+1:3d}: {debug_lines[i]}")
            print()
        
        # Send email
        print("üìß SENDING EMAIL:")
        print("-" * 20)
        
        email_client = EmailClient(config)
        
        # Create email content
        email_subject = f"üå¨Ô∏è WIND/GUST Test - {stage_name} - {current_date}"
        email_body = f"""
WIND AND GUST IMPLEMENTATION TEST
================================

Stage: {stage_name}
Date: {current_date}
Report Type: Morning

RESULT OUTPUT:
{result_output}

DEBUG OUTPUT:
{debug_output}

---
Generated by: Live Email Test - WIND and GUST
"""
        
        # Send email
        success = email_client.send_email(email_body, email_subject)
        
        if success:
            print("‚úÖ Email sent successfully!")
        else:
            print("‚ùå Failed to send email")
        
        print()
        print("üéØ TEST COMPLETED!")
        print("Check your email for the full debug output.")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_wind_gust_live_email() 